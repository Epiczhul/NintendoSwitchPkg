# Build Guide

## Install dependencies
- sudo apt-get install build-essential uuid-dev iasl git python3-distutils gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu
    ### Install powershell
        - Refer to https://docs.microsoft.com/en-us/powershell/scripting/install/install-ubuntu?view=powershell-7.2

## Clone Repositories
- git clone https://github.com/fail0verflow/shofel2.git
- git clone https://github.com/WolfLink115/Coreboot.git --recursive
- git clone https://github.com/tianocore/edk2.git --recursive
    ### Clone Brotli Inside of edk2 BaseTools and MdeModulePkg if it didn't when cloning
        - rm -rf edk2/BaseTools/Source/C/BrotliCompress/brotli && git clone https://github.com/google/brotli.git edk2 BaseTools/Source/C/BrotliCompress
        - rm -rf edk2/MdeModulePkg/Library/BrotliCustomDecompressLib/brotli && git clone https://github.com/google/brotli.git
            ### Clone NintendoSwitchPkg inside of the EDK2 source
                - https://github.com/imbushuo/NintendoSwitchPkg.git

## Build ShofEL2 exploit, EDK2, and Coreboot
- cd shofel2/exploit && make
- cd ../edk2
- source edksetup.sh
- make -C BaseTools/
- cp NintendoSwitchPkg/Tools/run-build.sh . && ./run-build.sh
- cd ../Coreboot && make nintendo_switch_defconfig && make

## After all that we should now have a coreboot.rom file in the build folder. Now we can try to boot edk2.
- cd ../shofel2/exploit
- sudo ./shofel2.py cbfs.bin ../../Coreboot/build/coreboot.rom
### If all went well, your Nintendo Switch should now be booting EDK2. Thank you for reading!

### If you run into a USB error, and you are using USB2.0, try using a USB3.0 port. If your pc doesn't have a USB3.0 port, there is a .patch file in the shofel2 source that you apply to your kernel. That will allow USB2.0 to work with shofel2. If you don't want to do that, or you just want to make things easier on yourself, you can use tegrarcmsmash.exe on a Windows install.